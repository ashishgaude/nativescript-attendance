"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var SqliteService = /** @class */ (function () {
    function SqliteService() {
        var _this = this;
        (new Sqlite("mytest.db"))
            .then(function (db) {
            _this.init(db);
        });
    }
    SqliteService.prototype.init = function (db) {
        var _this = this;
        return db.execSQL("CREATE TABLE IF NOT EXISTS Users (UID TEXT PRIMARY KEY, Name TEXT, Branch TEXT, DateOfInitiation TEXT)")
            .then(function (id) {
            console.log("Created/Already exists Users Table!");
            return db.execSQL("CREATE TABLE IF NOT EXISTS Users (UID INTEGER PRIMARY KEY, Name TEXT, Branch TEXT, DateOfInitiation TEXT)");
        })
            .then(function (id) {
            console.log("Created/Already exists Attandance Table!");
            _this.database = db;
        })
            .catch(function (error) {
            console.log("Table creation Error:", error);
        });
    };
    SqliteService.prototype.insert = function (query, dataArray) {
        // return this.database.execSQL("INSERT INTO people (firstname, lastname) VALUES (?, ?)", ["Nic", "Raboy"]);
        return this.database.execSQL(query, dataArray);
    };
    SqliteService.prototype.fetch = function () {
        // this function needs to be modified for where condtions
        this.database.all("SELECT * FROM Users").then(function (rows) {
            for (var row in rows) {
                console.log(row);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    SqliteService.prototype.fetchAll = function (table) {
        return this.database.all("SELECT * FROM Users");
    };
    SqliteService.prototype.deleteTable = function (tableName) {
        this.database.execSQL("DROP TABLE IF EXISTS " + tableName, [], function (err) {
            console.log("TABLE DROPPED");
        });
    };
    SqliteService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], SqliteService);
    return SqliteService;
}());
exports.SqliteService = SqliteService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsaXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcWxpdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc5QztJQUlJO1FBQUEsaUJBS0M7UUFKRyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3BCLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDSixLQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVNLDRCQUFJLEdBQVgsVUFBWSxFQUFFO1FBQWQsaUJBYUM7UUFaRyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyx3R0FBd0csQ0FBQzthQUN0SCxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLDJHQUEyRyxDQUFDLENBQUE7UUFDbEksQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUN4RCxLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQSxLQUFLO1lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTSw4QkFBTSxHQUFiLFVBQWMsS0FBSyxFQUFFLFNBQVM7UUFDMUIsNEdBQTRHO1FBQzVHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLDZCQUFLLEdBQVo7UUFDSSx5REFBeUQ7UUFDekQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO1lBQzlDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDcEIsQ0FBQztRQUNMLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxnQ0FBUSxHQUFmLFVBQWdCLEtBQUs7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUdNLG1DQUFXLEdBQWxCLFVBQW1CLFNBQVM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsMEJBQXdCLFNBQVcsRUFBRSxFQUFFLEVBQUUsVUFBQyxHQUFHO1lBQy9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBcERRLGFBQWE7UUFEekIsaUJBQVUsRUFBRTs7T0FDQSxhQUFhLENBcUR6QjtJQUFELG9CQUFDO0NBQUEsQUFyREQsSUFxREM7QUFyRFksc0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuY29uc3QgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTcWxpdGVTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIGRhdGFiYXNlOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgKG5ldyBTcWxpdGUoXCJteXRlc3QuZGJcIikpXHJcbiAgICAgICAgICAgIC50aGVuKGRiID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdChkYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KGRiKSB7XHJcbiAgICAgICAgcmV0dXJuIGRiLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBVc2VycyAoVUlEIFRFWFQgUFJJTUFSWSBLRVksIE5hbWUgVEVYVCwgQnJhbmNoIFRFWFQsIERhdGVPZkluaXRpYXRpb24gVEVYVClcIilcclxuICAgICAgICAgICAgLnRoZW4oaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDcmVhdGVkL0FscmVhZHkgZXhpc3RzIFVzZXJzIFRhYmxlIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYi5leGVjU1FMKFwiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgVXNlcnMgKFVJRCBJTlRFR0VSIFBSSU1BUlkgS0VZLCBOYW1lIFRFWFQsIEJyYW5jaCBURVhULCBEYXRlT2ZJbml0aWF0aW9uIFRFWFQpXCIpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGlkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRlZC9BbHJlYWR5IGV4aXN0cyBBdHRhbmRhbmNlIFRhYmxlIVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGFibGUgY3JlYXRpb24gRXJyb3I6XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5zZXJ0KHF1ZXJ5LCBkYXRhQXJyYXkpIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhpcy5kYXRhYmFzZS5leGVjU1FMKFwiSU5TRVJUIElOVE8gcGVvcGxlIChmaXJzdG5hbWUsIGxhc3RuYW1lKSBWQUxVRVMgKD8sID8pXCIsIFtcIk5pY1wiLCBcIlJhYm95XCJdKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5leGVjU1FMKHF1ZXJ5LCBkYXRhQXJyYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmZXRjaCgpIHtcclxuICAgICAgICAvLyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIG1vZGlmaWVkIGZvciB3aGVyZSBjb25kdGlvbnNcclxuICAgICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gVXNlcnNcIikudGhlbihyb3dzID0+IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcm93IGluIHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJvdylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTRUxFQ1QgRVJST1JcIiwgZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmZXRjaEFsbCh0YWJsZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmFsbChgU0VMRUNUICogRlJPTSBVc2Vyc2ApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZGVsZXRlVGFibGUodGFibGVOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKGBEUk9QIFRBQkxFIElGIEVYSVNUUyAke3RhYmxlTmFtZX1gLCBbXSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRBQkxFIERST1BQRURcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG59XHJcbiJdfQ==